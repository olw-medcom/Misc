<?xml version="1.0" encoding="UTF-8"?>
<testcase 
    id="ehmi_msh_sending_system_test" 
    xmlns="http://www.gitb.com/tdl/v1/" 
    xmlns:gitb="http://www.gitb.com/core/v1/" 
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
    xsi:schemaLocation="http://www.gitb.com/tdl/v1/ ../../../testbedSchemas/gitb_tdl.xsd">    

    <metadata>
        <gitb:name>MSH SBDH Sending System Test</gitb:name>
        <gitb:version>1.0</gitb:version>
        <gitb:description>Tests an EHMI SBDH XML document for an MSH Sending System</gitb:description>
    </metadata>

    <imports>
        <artifact type="schema" encoding="UTF-8" name="EHMISBDHSchema">resources/EHMI/ehmiSbdhStandardBusinessDocumentHeader.xsd</artifact>
        <artifact type="binary" name="schematron">resources/EHMI/schematrons/ehmiSBDHSendingSystemAssertions.xslt</artifact>
    </imports>

    <actors>
        <gitb:actor id="EHMIMSHSendingSystem" name="EHMI MSH Sending System" role="SUT"/>
        <gitb:actor id="SimulatedEHMIMSHReceivingSystem" name="Simulated EHMI MSH Receiving System"/>
    </actors>

    <namespaces>
        <ns prefix="sbdhNS">http://www.unece.org/cefact/namespaces/StandardBusinessDocumentHeader</ns>
        <ns prefix="f">http://hl7.org/fhir</ns>
    </namespaces>

    <steps>
        <assign to="httpHeaders{Content-Type}">"text/plain"</assign>
        <receive id="receiveEHMIMsg" desc="EHMI MSH SBDH Message" from="EHMIMSHSendingSystem" to="SimulatedEHMIMSHReceivingSystem" handler="HttpMessagingV2">
            <input name="uriExtension">"/receive-msh-sbdh-ehmi-msg"</input>
            <input name="method">"POST"</input>
            <input name="status">200</input>
            <input name="body">"Received"</input>
            <input name="headers">$httpHeaders</input>
        </receive>

        <verify handler="XmlValidator" desc="Validate XML structure">
            <input name="xml">$receiveEHMIMsg{request}{body}</input>
            <input name="xsd">$EHMISBDHSchema</input>
            <input name="stopOnXsdErrors">true()</input>
        </verify>

        <assign to="binaryContent" source="$receiveEHMIMsg{request}{body}">
            //sbdhNS:BinaryContent/text()
        </assign>

        <process id="decodeBinaryContent" handler="Base64Processor" output="decodedBinaryContent" operation="decode">
            <input name="input">$binaryContent</input>
        </process>
        
        <!-- TODO: We want to call a FHIR validator I think on the decodedBinaryContent, if the type is fhir ofc 
            I think we can do it with the <send id="fhirValidation" stopOnError="true" desc="Call FHIR Server to validate content structure" handler="HttpMessagingV2">
             <input name="uri">"hapifhirserver.dk/validate"</input>
             <input name="method">"POST"</input>
             </send>
        -->
        

        <assign to="binaryContentType" source="$receiveEHMIMsg{request}{body}">
            //sbdhNS:BinaryContent/@mimeType    
        </assign>
        
        <if desc="If binary content is XML">
            <cond>$binaryContentType = "application/fhir+xml"</cond>
            <then>
                <assign to="parameters{expectedDocumentIdentifierStandard}" source="$decodedBinaryContent">
                    /f:Bundle/f:entry[1]/f:resource/f:MessageHeader/f:eventCoding/f:code/@value
                </assign>
                
                <assign to="parameters{expectedMessageDefinitionVersion}" source="$decodedBinaryContent">
                    replace(/f:Bundle/f:entry[1]/f:resource/f:MessageHeader/f:definition/@value,
                        '.*[dD]efinition([0-9.]+)$',
                        '$1')
                </assign>

                <assign to="parameters{expectedStructureDefinition}" source="$decodedBinaryContent">
                    tokenize( (/f:Bundle/f:meta/f:profile/@value)[1], '/')[last()]
                </assign>

                <assign to="parameters{expectedPatientCPR}" source="$decodedBinaryContent">
                    /f:Bundle/f:entry/f:resource/f:Patient/f:identifier[f:system/@value = 'urn:oid:1.2.208.176.1.2']/f:value/@value
                </assign>
                
                <assign to="parameters{expectedSenderId}" source="$decodedBinaryContent">
                    /f:Bundle/f:entry/f:resource/*
                    [concat(local-name(), '/', f:id/@value) = /f:Bundle/f:entry[1]/f:resource/f:MessageHeader/f:sender/f:reference/@value]
                    /f:identifier[f:system/@value = 'urn:oid:1.2.208.176.1.1']/f:value/@value
                </assign>
                
                <assign to="parameters{expectedReceiverId}" source="$decodedBinaryContent">
                    /f:Bundle/f:entry/f:resource/*
                    [concat(local-name(), '/', f:id/@value) = /f:Bundle/f:entry[1]/f:resource/f:MessageHeader/f:destination/f:receiver/f:reference/@value]
                    /f:identifier[f:system/@value = 'urn:oid:1.2.208.176.1.1']/f:value/@value
                </assign>
                
                <assign to="parameters{expectedMessageIdentifier}" source="$decodedBinaryContent">
                    /f:Bundle/f:entry[1]/f:resource/f:MessageHeader/f:id/@value
                </assign>
                
                <assign to="parameters{expectedMessageEnvelopeIdentifier}" source="$decodedBinaryContent">
                    /f:Bundle/f:id/@value
                </assign>
            </then>
        </if>
        
        <if desc="If binary content is JSON">
            <cond>$binaryContentType = "application/fhir+json"</cond>
            <then>
                <log>"Binary content is JSON"</log>
                <process id="test" handler="$DOMAIN{processingServiceAddress}" operation="uppercase">
                    <input name="input">"Hejsa"</input>
                </process>
                <log>$test{output}</log>
                <process handler="JsonPointerProcessor" operation="process" output="test">
                    <input name="content">$decodedBinaryContent</input>
                    <input name="pointer">"/id"</input>
                </process>

                <!-- TODO: Assign all the parameters with jsonPath instead of xPath -->
            </then>
        </if>
        
        <process output="schematronTemplate" handler="TemplateProcessor">
            <input name="parameters">$parameters</input>
            <input name="template">$schematron</input>
            <input name="syntax">'freemarker'</input>
        </process>
        
        <verify handler="XmlValidator" desc="Validate content">
            <input name="xml">$receiveEHMIMsg{request}{body}</input>
            <input name="xsd">$EHMISBDHSchema</input>
            <input name="schematron">$schematronTemplate</input>
            <input name="schematronType">'xslt'</input>
        </verify>
    </steps>

    <output>
        <success>
            <default>"Test session succeeded."</default>
        </success>
        <failure>
            <default>"Test session failed. Refer to the report for further details."</default>
        </failure>
    </output>

</testcase>